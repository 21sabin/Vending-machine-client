{"ast":null,"code":"import createDataContext from './createDataContext';\nimport { instance as api } from '../api/api';\n\nconst mainReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_ITEMS':\n      return { ...state,\n        items: action.payload,\n        loading: false\n      };\n\n    case 'FETCH_CREDIT':\n      return { ...state,\n        credit: action.payload,\n        loading: false\n      };\n\n    case 'LOADING':\n      return { ...state,\n        loading: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst getItems = dispatch => async () => {\n  dispatch({\n    type: 'LOADING',\n    payload: true\n  });\n  const {\n    data\n  } = await api.get('/items');\n  dispatch({\n    type: 'FETCH_ITEMS',\n    payload: data\n  });\n};\n\nconst getCredits = dispatch => async () => {\n  try {\n    dispatch({\n      type: 'LOADING',\n      payload: true\n    });\n    const {\n      data\n    } = await api.get('/credits');\n    console.log(data[0]);\n    dispatch({\n      type: 'FETCH_CREDIT',\n      payload: data[0]\n    });\n  } catch (error) {\n    console.log('getCredits error', error);\n  }\n};\n\nconst buyItem = dispatch => async (item, callback) => {\n  try {\n    dispatch({\n      type: 'LOADING',\n      payload: true\n    });\n    const response = await api.post('/items/buy', item);\n    callback(true, 'Your item has been purchased successfully');\n  } catch (error) {\n    var _error$response$data$, _error$response, _error$response$data;\n\n    console.log('error', error);\n    const message = (_error$response$data$ = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) !== null && _error$response$data$ !== void 0 ? _error$response$data$ : 'Something went wrong';\n    callback(false, message);\n  }\n};\n\nconst refundItem = dispatch => async (item, callback) => {\n  try {\n    const response = await api.post('/items/refund', item);\n    console.log('Refund response', response);\n    callback(true, 'Your item has been refunded successfully');\n  } catch (error) {\n    var _error$response$data$2, _error$response2, _error$response2$data;\n\n    console.log(error);\n    const message = (_error$response$data$2 = error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) !== null && _error$response$data$2 !== void 0 ? _error$response$data$2 : 'Something went wrong';\n    callback(false, message);\n  }\n};\n\nexport const {\n  Context,\n  Provider\n} = createDataContext(mainReducer, {\n  getItems,\n  getCredits,\n  buyItem,\n  refundItem\n}, {\n  loading: false,\n  items: [],\n  credit: {}\n});","map":{"version":3,"sources":["/home/novelty/Desktop/interview-question/vending-machine/client/src/context/mainContext.tsx"],"names":["createDataContext","instance","api","mainReducer","state","action","type","items","payload","loading","credit","getItems","dispatch","data","get","getCredits","console","log","error","buyItem","item","callback","response","post","message","refundItem","Context","Provider"],"mappings":"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","sourcesContent":["import createDataContext from './createDataContext';\nimport { instance as api } from '../api/api';\n\nconst mainReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'FETCH_ITEMS':\n      return { ...state, items: action.payload, loading: false };\n    case 'FETCH_CREDIT':\n      return { ...state, credit: action.payload, loading: false };\n    case 'LOADING':\n      return { ...state, loading: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst getItems = (dispatch: any) => async () => {\n  dispatch({ type: 'LOADING', payload: true });\n  const { data } = await api.get('/items');\n  dispatch({ type: 'FETCH_ITEMS', payload: data });\n};\n\nconst getCredits = (dispatch: any) => async () => {\n  try {\n    dispatch({ type: 'LOADING', payload: true });\n    const { data } = await api.get('/credits');\n    console.log(data[0])\n    dispatch({ type: 'FETCH_CREDIT', payload: data[0] });\n  } catch (error) {\n    console.log('getCredits error', error)\n  }\n};\n\n\nconst buyItem = (dispatch: any) => async (item: any, callback: (success: boolean, msg?: string) => void) => {\n  try {\n    dispatch({ type: 'LOADING', payload: true })\n    const response = await api.post('/items/buy', item);\n    callback(true, 'Your item has been purchased successfully');\n  } catch (error) {\n    console.log('error', error)\n    const message = error?.response?.data?.message ?? 'Something went wrong';\n    callback(false, message);\n  }\n}\n\nconst refundItem = (dispatch: any) => async (item: any, callback: (success: boolean, msg?: string) => void) => {\n  try {\n    const response = await api.post('/items/refund', item);\n    console.log('Refund response', response)\n    callback(true, 'Your item has been refunded successfully');\n  } catch (error) {\n    console.log(error)\n    const message = error?.response?.data?.message ?? 'Something went wrong';\n    callback(false, message);\n  }\n}\n\nexport const { Context, Provider } = createDataContext(\n  mainReducer,\n  { getItems, getCredits, buyItem, refundItem },\n  { loading: false, items: [], credit: {} }\n);\n"]},"metadata":{},"sourceType":"module"}